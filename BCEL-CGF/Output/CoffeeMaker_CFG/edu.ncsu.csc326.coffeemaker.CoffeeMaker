edu.ncsu.csc326.coffeemaker.CoffeeMaker.<init>{
	entry ->   
	MC: public CoffeeMaker() { -> java.lang.Object.<init>;
	CF: public CoffeeMaker() { -> recipeBook = new RecipeBook();;
	MC: recipeBook = new RecipeBook(); -> edu.ncsu.csc326.coffeemaker.RecipeBook.<init>;
	CF: recipeBook = new RecipeBook(); -> inventory = new Inventory();;
	MC: inventory = new Inventory(); -> edu.ncsu.csc326.coffeemaker.Inventory.<init>;
	CF: inventory = new Inventory(); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.CoffeeMaker.addRecipe{
	entry ->   
	MC: return recipeBook.addRecipe(r); -> edu.ncsu.csc326.coffeemaker.RecipeBook.addRecipe;
	CF: return recipeBook.addRecipe(r); -> exit;
}
edu.ncsu.csc326.coffeemaker.CoffeeMaker.deleteRecipe{
	entry ->   
	MC: return recipeBook.deleteRecipe(recipeToDelete); -> edu.ncsu.csc326.coffeemaker.RecipeBook.deleteRecipe;
	CF: return recipeBook.deleteRecipe(recipeToDelete); -> exit;
}
edu.ncsu.csc326.coffeemaker.CoffeeMaker.editRecipe{
	entry ->   
	MC: return recipeBook.editRecipe(recipeToEdit, r); -> edu.ncsu.csc326.coffeemaker.RecipeBook.editRecipe;
	CF: return recipeBook.editRecipe(recipeToEdit, r); -> exit;
}
edu.ncsu.csc326.coffeemaker.CoffeeMaker.addInventory{
	entry ->   
	MC: inventory.addCoffee(amtCoffee); -> edu.ncsu.csc326.coffeemaker.Inventory.addCoffee;
	CF: inventory.addCoffee(amtCoffee); -> inventory.addMilk(amtMilk);;
	MC: inventory.addMilk(amtMilk); -> edu.ncsu.csc326.coffeemaker.Inventory.addMilk;
	CF: inventory.addMilk(amtMilk); -> inventory.addSugar(amtSugar);;
	MC: inventory.addSugar(amtSugar); -> edu.ncsu.csc326.coffeemaker.Inventory.addSugar;
	CF: inventory.addSugar(amtSugar); -> inventory.addChocolate(amtChocolate);;
	MC: inventory.addChocolate(amtChocolate); -> edu.ncsu.csc326.coffeemaker.Inventory.addChocolate;
	CF: inventory.addChocolate(amtChocolate); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.CoffeeMaker.checkInventory{
	entry ->   
	MC: return inventory.toString(); -> edu.ncsu.csc326.coffeemaker.Inventory.toString;
	CF: return inventory.toString(); -> exit;
}
edu.ncsu.csc326.coffeemaker.CoffeeMaker.makeCoffee{
	entry ->   
	CF: int change = 0; -> if (getRecipes()[recipeToPurchase] == null) {;
	MC: if (getRecipes()[recipeToPurchase] == null) { -> edu.ncsu.csc326.coffeemaker.CoffeeMaker.getRecipes;
	CF: if (getRecipes()[recipeToPurchase] == null) { -> } else if (getRecipes()[recipeToPurchase].getPrice() <= amtPaid) { [label = "ifnonnull"];
	CF: if (getRecipes()[recipeToPurchase] == null) { -> change = amtPaid; [label = "!ifnonnull"];
	CF: change = amtPaid; -> } else if (getRecipes()[recipeToPurchase].getPrice() <= amtPaid) {;
	CF: } else if (getRecipes()[recipeToPurchase].getPrice() <= amtPaid) { -> return change; [label = "goto"];
	MC: } else if (getRecipes()[recipeToPurchase].getPrice() <= amtPaid) { -> edu.ncsu.csc326.coffeemaker.CoffeeMaker.getRecipes;
	MC: } else if (getRecipes()[recipeToPurchase].getPrice() <= amtPaid) { -> edu.ncsu.csc326.coffeemaker.Recipe.getPrice;
	CF: } else if (getRecipes()[recipeToPurchase].getPrice() <= amtPaid) { -> change = amtPaid; [label = "if_icmpgt"];
	CF: } else if (getRecipes()[recipeToPurchase].getPrice() <= amtPaid) { -> if (inventory.useIngredients(getRecipes()[recipeToPurchase])) { [label = "!if_icmpgt"];
	MC: if (inventory.useIngredients(getRecipes()[recipeToPurchase])) { -> edu.ncsu.csc326.coffeemaker.CoffeeMaker.getRecipes;
	MC: if (inventory.useIngredients(getRecipes()[recipeToPurchase])) { -> edu.ncsu.csc326.coffeemaker.Inventory.useIngredients;
	CF: if (inventory.useIngredients(getRecipes()[recipeToPurchase])) { -> change = amtPaid; [label = "ifeq"];
	CF: if (inventory.useIngredients(getRecipes()[recipeToPurchase])) { -> change = amtPaid - getRecipes()[recipeToPurchase].getPrice(); [label = "!ifeq"];
	MC: change = amtPaid - getRecipes()[recipeToPurchase].getPrice(); -> edu.ncsu.csc326.coffeemaker.CoffeeMaker.getRecipes;
	MC: change = amtPaid - getRecipes()[recipeToPurchase].getPrice(); -> edu.ncsu.csc326.coffeemaker.Recipe.getPrice;
	CF: change = amtPaid - getRecipes()[recipeToPurchase].getPrice(); -> } else {;
	CF: } else { -> return change; [label = "goto"];
	CF: change = amtPaid; -> } else {;
	CF: } else { -> return change; [label = "goto"];
	CF: change = amtPaid; -> return change;;
	CF: return change; -> exit;
}
edu.ncsu.csc326.coffeemaker.CoffeeMaker.getRecipes{
	entry ->   
	MC: return recipeBook.getRecipes(); -> edu.ncsu.csc326.coffeemaker.RecipeBook.getRecipes;
	CF: return recipeBook.getRecipes(); -> exit;
}
