<init>{
	entry ->   
	MC: public class Main { -> <init>;
	CF: public class Main { -> exit;
}
mainMenu{
	entry ->   
	MC: System.out.println("1. Add a recipe"); -> println;
	CF: System.out.println("1. Add a recipe"); -> System.out.println("2. Delete a recipe");;
	MC: System.out.println("2. Delete a recipe"); -> println;
	CF: System.out.println("2. Delete a recipe"); -> System.out.println("3. Edit a recipe");;
	MC: System.out.println("3. Edit a recipe"); -> println;
	CF: System.out.println("3. Edit a recipe"); -> System.out.println("4. Add inventory");;
	MC: System.out.println("4. Add inventory"); -> println;
	CF: System.out.println("4. Add inventory"); -> System.out.println("5. Check inventory");;
	MC: System.out.println("5. Check inventory"); -> println;
	CF: System.out.println("5. Check inventory"); -> System.out.println("6. Make coffee");;
	MC: System.out.println("6. Make coffee"); -> println;
	CF: System.out.println("6. Make coffee"); -> System.out.println("0. Exit\n");;
	MC: System.out.println("0. Exit\n"); -> println;
	CF: System.out.println("0. Exit\n"); -> int userInput = Integer.parseInt(inputOutput("Please press the number that corresponds to what you would like the coffee maker to do."));;
	MC: int userInput = Integer.parseInt(inputOutput("Please press the number that corresponds to what you would like the coffee maker to do.")); -> inputOutput;
	MC: int userInput = Integer.parseInt(inputOutput("Please press the number that corresponds to what you would like the coffee maker to do.")); -> parseInt;
	CF: int userInput = Integer.parseInt(inputOutput("Please press the number that corresponds to what you would like the coffee maker to do.")); -> if (userInput >= 0 && userInput <=6) {;
	CF: if (userInput >= 0 && userInput <=6) { -> if (userInput == 1) addRecipe();;
	MC: if (userInput == 1) addRecipe(); -> addRecipe;
	CF: if (userInput == 1) addRecipe(); -> if (userInput == 2) deleteRecipe();;
	MC: if (userInput == 2) deleteRecipe(); -> deleteRecipe;
	CF: if (userInput == 2) deleteRecipe(); -> if (userInput == 3) editRecipe();;
	MC: if (userInput == 3) editRecipe(); -> editRecipe;
	CF: if (userInput == 3) editRecipe(); -> if (userInput == 4) addInventory();;
	MC: if (userInput == 4) addInventory(); -> addInventory;
	CF: if (userInput == 4) addInventory(); -> if (userInput == 5) checkInventory();;
	MC: if (userInput == 5) checkInventory(); -> checkInventory;
	CF: if (userInput == 5) checkInventory(); -> if (userInput == 6) makeCoffee();;
	MC: if (userInput == 6) makeCoffee(); -> makeCoffee;
	CF: if (userInput == 6) makeCoffee(); -> if (userInput == 0) System.exit(0);;
	MC: if (userInput == 0) System.exit(0); -> exit;
	CF: if (userInput == 0) System.exit(0); -> } else {;
	CF: } else { -> System.out.println("Please enter a number from 0 - 6");;
	MC: System.out.println("Please enter a number from 0 - 6"); -> println;
	CF: System.out.println("Please enter a number from 0 - 6"); -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> System.out.println("Please enter a number from 0 - 6");;
	MC: System.out.println("Please enter a number from 0 - 6"); -> println;
	CF: System.out.println("Please enter a number from 0 - 6"); -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> };
	CF: } -> exit;
}
addRecipe{
	entry ->   
	MC: String name = inputOutput("\nPlease enter the recipe name: "); -> inputOutput;
	CF: String name = inputOutput("\nPlease enter the recipe name: "); -> String priceString = inputOutput("\nPlease enter the recipe price: $");;
	MC: String priceString = inputOutput("\nPlease enter the recipe price: $"); -> inputOutput;
	CF: String priceString = inputOutput("\nPlease enter the recipe price: $"); -> String coffeeString = inputOutput("\nPlease enter the units of coffee in the recipe: ");;
	MC: String coffeeString = inputOutput("\nPlease enter the units of coffee in the recipe: "); -> inputOutput;
	CF: String coffeeString = inputOutput("\nPlease enter the units of coffee in the recipe: "); -> String milkString = inputOutput("\nPlease enter the units of milk in the recipe: ");;
	MC: String milkString = inputOutput("\nPlease enter the units of milk in the recipe: "); -> inputOutput;
	CF: String milkString = inputOutput("\nPlease enter the units of milk in the recipe: "); -> String sugarString = inputOutput("\nPlease enter the units of sugar in the recipe: ");;
	MC: String sugarString = inputOutput("\nPlease enter the units of sugar in the recipe: "); -> inputOutput;
	CF: String sugarString = inputOutput("\nPlease enter the units of sugar in the recipe: "); -> String chocolateString = inputOutput("\nPlease enter the units of chocolate in the recipe: ");;
	MC: String chocolateString = inputOutput("\nPlease enter the units of chocolate in the recipe: "); -> inputOutput;
	CF: String chocolateString = inputOutput("\nPlease enter the units of chocolate in the recipe: "); -> Recipe r = new Recipe();;
	MC: Recipe r = new Recipe(); -> <init>;
	CF: Recipe r = new Recipe(); -> r.setName(name);;
	MC: r.setName(name); -> setName;
	CF: r.setName(name); -> r.setPrice(priceString);;
	MC: r.setPrice(priceString); -> setPrice;
	CF: r.setPrice(priceString); -> r.setAmtCoffee(coffeeString);;
	MC: r.setAmtCoffee(coffeeString); -> setAmtCoffee;
	CF: r.setAmtCoffee(coffeeString); -> r.setAmtMilk(milkString);;
	MC: r.setAmtMilk(milkString); -> setAmtMilk;
	CF: r.setAmtMilk(milkString); -> r.setAmtSugar(sugarString);;
	MC: r.setAmtSugar(sugarString); -> setAmtSugar;
	CF: r.setAmtSugar(sugarString); -> r.setAmtChocolate(chocolateString);;
	MC: r.setAmtChocolate(chocolateString); -> setAmtChocolate;
	CF: r.setAmtChocolate(chocolateString); -> boolean recipeAdded = coffeeMaker.addRecipe(r);;
	MC: boolean recipeAdded = coffeeMaker.addRecipe(r); -> addRecipe;
	CF: boolean recipeAdded = coffeeMaker.addRecipe(r); -> if(recipeAdded) {;
	CF: if(recipeAdded) { -> System.out.println(name + " successfully added.\n");;
	MC: System.out.println(name + " successfully added.\n"); -> valueOf;
	MC: System.out.println(name + " successfully added.\n"); -> <init>;
	MC: System.out.println(name + " successfully added.\n"); -> append;
	MC: System.out.println(name + " successfully added.\n"); -> toString;
	MC: System.out.println(name + " successfully added.\n"); -> println;
	CF: System.out.println(name + " successfully added.\n"); -> } else {;
	CF: } else { -> System.out.println(name + " could not be added.\n");;
	MC: System.out.println(name + " could not be added.\n"); -> valueOf;
	MC: System.out.println(name + " could not be added.\n"); -> <init>;
	MC: System.out.println(name + " could not be added.\n"); -> append;
	MC: System.out.println(name + " could not be added.\n"); -> toString;
	MC: System.out.println(name + " could not be added.\n"); -> println;
	CF: System.out.println(name + " could not be added.\n"); -> } catch (RecipeException e) {;
	CF: } catch (RecipeException e) { -> System.out.println(e.getMessage());;
	MC: System.out.println(e.getMessage()); -> getMessage;
	MC: System.out.println(e.getMessage()); -> println;
	CF: System.out.println(e.getMessage()); -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> } finally {;
	CF: } finally { -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> };
	CF: } -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> };
	CF: } -> exit;
}
deleteRecipe{
	entry ->   
	MC: Recipe [] recipes = coffeeMaker.getRecipes(); -> getRecipes;
	CF: Recipe [] recipes = coffeeMaker.getRecipes(); -> for(int i = 0; i < recipes.length; i++) {;
	CF: for(int i = 0; i < recipes.length; i++) { -> if (recipes[i] != null) {;
	CF: if (recipes[i] != null) { -> System.out.println((i+1) + ". " + recipes[i].getName());;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> valueOf;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> <init>;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> append;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> getName;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> append;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> toString;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> println;
	CF: System.out.println((i+1) + ". " + recipes[i].getName()); -> for(int i = 0; i < recipes.length; i++) {;
	CF: for(int i = 0; i < recipes.length; i++) { -> int recipeToDelete = recipeListSelection("Please select the number of the recipe to delete.");;
	MC: int recipeToDelete = recipeListSelection("Please select the number of the recipe to delete."); -> recipeListSelection;
	CF: int recipeToDelete = recipeListSelection("Please select the number of the recipe to delete."); -> if(recipeToDelete < 0) {;
	CF: if(recipeToDelete < 0) { -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> String recipeDeleted = coffeeMaker.deleteRecipe(recipeToDelete);;
	MC: String recipeDeleted = coffeeMaker.deleteRecipe(recipeToDelete); -> deleteRecipe;
	CF: String recipeDeleted = coffeeMaker.deleteRecipe(recipeToDelete); -> if (recipeDeleted != null) {;
	CF: if (recipeDeleted != null) { -> System.out.println(recipeDeleted + " successfully deleted.\n");;
	MC: System.out.println(recipeDeleted + " successfully deleted.\n"); -> valueOf;
	MC: System.out.println(recipeDeleted + " successfully deleted.\n"); -> <init>;
	MC: System.out.println(recipeDeleted + " successfully deleted.\n"); -> append;
	MC: System.out.println(recipeDeleted + " successfully deleted.\n"); -> toString;
	MC: System.out.println(recipeDeleted + " successfully deleted.\n"); -> println;
	CF: System.out.println(recipeDeleted + " successfully deleted.\n"); -> } else {;
	CF: } else { -> System.out.println("Selected recipe doesn't exist and could not be deleted.\n");;
	MC: System.out.println("Selected recipe doesn't exist and could not be deleted.\n"); -> println;
	CF: System.out.println("Selected recipe doesn't exist and could not be deleted.\n"); -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> };
	CF: } -> exit;
}
editRecipe{
	entry ->   
	MC: Recipe [] recipes = coffeeMaker.getRecipes(); -> getRecipes;
	CF: Recipe [] recipes = coffeeMaker.getRecipes(); -> for(int i = 0; i < recipes.length; i++) {;
	CF: for(int i = 0; i < recipes.length; i++) { -> if (recipes[i] != null) {;
	CF: if (recipes[i] != null) { -> System.out.println((i+1) + ". " + recipes[i].getName());;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> valueOf;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> <init>;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> append;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> getName;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> append;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> toString;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> println;
	CF: System.out.println((i+1) + ". " + recipes[i].getName()); -> for(int i = 0; i < recipes.length; i++) {;
	CF: for(int i = 0; i < recipes.length; i++) { -> int recipeToEdit = recipeListSelection("Please select the number of the recipe to edit.");;
	MC: int recipeToEdit = recipeListSelection("Please select the number of the recipe to edit."); -> recipeListSelection;
	CF: int recipeToEdit = recipeListSelection("Please select the number of the recipe to edit."); -> if(recipeToEdit < 0) {;
	CF: if(recipeToEdit < 0) { -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> String priceString = inputOutput("\nPlease enter the recipe price: $");;
	MC: String priceString = inputOutput("\nPlease enter the recipe price: $"); -> inputOutput;
	CF: String priceString = inputOutput("\nPlease enter the recipe price: $"); -> String coffeeString = inputOutput("\nPlease enter the units of coffee in the recipe: ");;
	MC: String coffeeString = inputOutput("\nPlease enter the units of coffee in the recipe: "); -> inputOutput;
	CF: String coffeeString = inputOutput("\nPlease enter the units of coffee in the recipe: "); -> String milkString = inputOutput("\nPlease enter the units of milk in the recipe: ");;
	MC: String milkString = inputOutput("\nPlease enter the units of milk in the recipe: "); -> inputOutput;
	CF: String milkString = inputOutput("\nPlease enter the units of milk in the recipe: "); -> String sugarString = inputOutput("\nPlease enter the units of sugar in the recipe: ");;
	MC: String sugarString = inputOutput("\nPlease enter the units of sugar in the recipe: "); -> inputOutput;
	CF: String sugarString = inputOutput("\nPlease enter the units of sugar in the recipe: "); -> String chocolateString = inputOutput("\nPlease enter the units of chocolate in the recipe: ");;
	MC: String chocolateString = inputOutput("\nPlease enter the units of chocolate in the recipe: "); -> inputOutput;
	CF: String chocolateString = inputOutput("\nPlease enter the units of chocolate in the recipe: "); -> Recipe newRecipe = new Recipe();;
	MC: Recipe newRecipe = new Recipe(); -> <init>;
	CF: Recipe newRecipe = new Recipe(); -> newRecipe.setPrice(priceString);;
	MC: newRecipe.setPrice(priceString); -> setPrice;
	CF: newRecipe.setPrice(priceString); -> newRecipe.setAmtCoffee(coffeeString);;
	MC: newRecipe.setAmtCoffee(coffeeString); -> setAmtCoffee;
	CF: newRecipe.setAmtCoffee(coffeeString); -> newRecipe.setAmtMilk(milkString);;
	MC: newRecipe.setAmtMilk(milkString); -> setAmtMilk;
	CF: newRecipe.setAmtMilk(milkString); -> newRecipe.setAmtSugar(sugarString);;
	MC: newRecipe.setAmtSugar(sugarString); -> setAmtSugar;
	CF: newRecipe.setAmtSugar(sugarString); -> newRecipe.setAmtChocolate(chocolateString);;
	MC: newRecipe.setAmtChocolate(chocolateString); -> setAmtChocolate;
	CF: newRecipe.setAmtChocolate(chocolateString); -> String recipeEdited = coffeeMaker.editRecipe(recipeToEdit, newRecipe);;
	MC: String recipeEdited = coffeeMaker.editRecipe(recipeToEdit, newRecipe); -> editRecipe;
	CF: String recipeEdited = coffeeMaker.editRecipe(recipeToEdit, newRecipe); -> if (recipeEdited != null) {;
	CF: if (recipeEdited != null) { -> System.out.println(recipeEdited + " successfully edited.\n");;
	MC: System.out.println(recipeEdited + " successfully edited.\n"); -> valueOf;
	MC: System.out.println(recipeEdited + " successfully edited.\n"); -> <init>;
	MC: System.out.println(recipeEdited + " successfully edited.\n"); -> append;
	MC: System.out.println(recipeEdited + " successfully edited.\n"); -> toString;
	MC: System.out.println(recipeEdited + " successfully edited.\n"); -> println;
	CF: System.out.println(recipeEdited + " successfully edited.\n"); -> };
	CF: } -> System.out.println(recipeEdited + "could not be edited.\n");;
	MC: System.out.println(recipeEdited + "could not be edited.\n"); -> valueOf;
	MC: System.out.println(recipeEdited + "could not be edited.\n"); -> <init>;
	MC: System.out.println(recipeEdited + "could not be edited.\n"); -> append;
	MC: System.out.println(recipeEdited + "could not be edited.\n"); -> toString;
	MC: System.out.println(recipeEdited + "could not be edited.\n"); -> println;
	CF: System.out.println(recipeEdited + "could not be edited.\n"); -> } catch (RecipeException e) {;
	CF: } catch (RecipeException e) { -> System.out.println(e.getMessage());;
	MC: System.out.println(e.getMessage()); -> getMessage;
	MC: System.out.println(e.getMessage()); -> println;
	CF: System.out.println(e.getMessage()); -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> } finally {;
	CF: } finally { -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> };
	CF: } -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> };
	CF: } -> exit;
}
addInventory{
	entry ->   
	MC: String coffeeString = inputOutput("\nPlease enter the units of coffee to add: "); -> inputOutput;
	CF: String coffeeString = inputOutput("\nPlease enter the units of coffee to add: "); -> String milkString = inputOutput("\nPlease enter the units of milk to add: ");;
	MC: String milkString = inputOutput("\nPlease enter the units of milk to add: "); -> inputOutput;
	CF: String milkString = inputOutput("\nPlease enter the units of milk to add: "); -> String sugarString = inputOutput("\nPlease enter the units of sugar to add: ");;
	MC: String sugarString = inputOutput("\nPlease enter the units of sugar to add: "); -> inputOutput;
	CF: String sugarString = inputOutput("\nPlease enter the units of sugar to add: "); -> String chocolateString = inputOutput("\nPlease enter the units of chocolate to add: ");;
	MC: String chocolateString = inputOutput("\nPlease enter the units of chocolate to add: "); -> inputOutput;
	CF: String chocolateString = inputOutput("\nPlease enter the units of chocolate to add: "); -> coffeeMaker.addInventory(coffeeString, milkString, sugarString, chocolateString);;
	MC: coffeeMaker.addInventory(coffeeString, milkString, sugarString, chocolateString); -> addInventory;
	CF: coffeeMaker.addInventory(coffeeString, milkString, sugarString, chocolateString); -> System.out.println("Inventory successfully added");;
	MC: System.out.println("Inventory successfully added"); -> println;
	CF: System.out.println("Inventory successfully added"); -> } catch (InventoryException e) {;
	CF: } catch (InventoryException e) { -> System.out.println("Inventory was not added");;
	MC: System.out.println("Inventory was not added"); -> println;
	CF: System.out.println("Inventory was not added"); -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> } finally {;
	CF: } finally { -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> };
	CF: } -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> };
	CF: } -> exit;
}
checkInventory{
	entry ->   
	MC: System.out.println(coffeeMaker.checkInventory()); -> checkInventory;
	MC: System.out.println(coffeeMaker.checkInventory()); -> println;
	CF: System.out.println(coffeeMaker.checkInventory()); -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> };
	CF: } -> exit;
}
makeCoffee{
	entry ->   
	MC: Recipe [] recipes = coffeeMaker.getRecipes(); -> getRecipes;
	CF: Recipe [] recipes = coffeeMaker.getRecipes(); -> for(int i = 0; i < recipes.length; i++) {;
	CF: for(int i = 0; i < recipes.length; i++) { -> if (recipes[i] != null) {;
	CF: if (recipes[i] != null) { -> System.out.println((i+1) + ". " + recipes[i].getName());;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> valueOf;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> <init>;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> append;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> getName;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> append;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> toString;
	MC: System.out.println((i+1) + ". " + recipes[i].getName()); -> println;
	CF: System.out.println((i+1) + ". " + recipes[i].getName()); -> for(int i = 0; i < recipes.length; i++) {;
	CF: for(int i = 0; i < recipes.length; i++) { -> int recipeToPurchase = recipeListSelection("Please select the number of the recipe to purchase.");;
	MC: int recipeToPurchase = recipeListSelection("Please select the number of the recipe to purchase."); -> recipeListSelection;
	CF: int recipeToPurchase = recipeListSelection("Please select the number of the recipe to purchase."); -> String amountPaid = inputOutput("Please enter the amount you wish to pay");;
	MC: String amountPaid = inputOutput("Please enter the amount you wish to pay"); -> inputOutput;
	CF: String amountPaid = inputOutput("Please enter the amount you wish to pay"); -> int amtPaid = 0;;
	CF: int amtPaid = 0; -> amtPaid = Integer.parseInt(amountPaid);;
	MC: amtPaid = Integer.parseInt(amountPaid); -> parseInt;
	CF: amtPaid = Integer.parseInt(amountPaid); -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> System.out.println("Please enter a positive integer");;
	MC: System.out.println("Please enter a positive integer"); -> println;
	CF: System.out.println("Please enter a positive integer"); -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> int change = coffeeMaker.makeCoffee(recipeToPurchase, amtPaid);;
	MC: int change = coffeeMaker.makeCoffee(recipeToPurchase, amtPaid); -> makeCoffee;
	CF: int change = coffeeMaker.makeCoffee(recipeToPurchase, amtPaid); -> if (change == amtPaid) {;
	CF: if (change == amtPaid) { -> System.out.println("Insufficient funds to purchase.");;
	MC: System.out.println("Insufficient funds to purchase."); -> println;
	CF: System.out.println("Insufficient funds to purchase."); -> } else {;
	CF: } else { -> System.out.println("Thank you for purchasing " + coffeeMaker.getRecipes()[recipeToPurchase].getName());;
	MC: System.out.println("Thank you for purchasing " + coffeeMaker.getRecipes()[recipeToPurchase].getName()); -> <init>;
	MC: System.out.println("Thank you for purchasing " + coffeeMaker.getRecipes()[recipeToPurchase].getName()); -> getRecipes;
	MC: System.out.println("Thank you for purchasing " + coffeeMaker.getRecipes()[recipeToPurchase].getName()); -> getName;
	MC: System.out.println("Thank you for purchasing " + coffeeMaker.getRecipes()[recipeToPurchase].getName()); -> append;
	MC: System.out.println("Thank you for purchasing " + coffeeMaker.getRecipes()[recipeToPurchase].getName()); -> toString;
	MC: System.out.println("Thank you for purchasing " + coffeeMaker.getRecipes()[recipeToPurchase].getName()); -> println;
	CF: System.out.println("Thank you for purchasing " + coffeeMaker.getRecipes()[recipeToPurchase].getName()); -> System.out.println("Your change is: " + change + "\n");;
	MC: System.out.println("Your change is: " + change + "\n"); -> <init>;
	MC: System.out.println("Your change is: " + change + "\n"); -> append;
	MC: System.out.println("Your change is: " + change + "\n"); -> append;
	MC: System.out.println("Your change is: " + change + "\n"); -> toString;
	MC: System.out.println("Your change is: " + change + "\n"); -> println;
	CF: System.out.println("Your change is: " + change + "\n"); -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> };
	CF: } -> exit;
}
inputOutput{
	entry ->   
	MC: System.out.println(message); -> println;
	CF: System.out.println(message); -> BufferedReader br = new BufferedReader(new InputStreamReader(System.in));;
	MC: BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); -> <init>;
	MC: BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); -> <init>;
	CF: BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); -> String returnString = "";;
	CF: String returnString = ""; -> returnString = br.readLine();;
	MC: returnString = br.readLine(); -> readLine;
	CF: returnString = br.readLine(); -> };
	CF: } -> catch (IOException e){;
	CF: catch (IOException e){ -> System.out.println("Error reading in value");;
	MC: System.out.println("Error reading in value"); -> println;
	CF: System.out.println("Error reading in value"); -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> return returnString;;
	CF: return returnString; -> exit;
}
recipeListSelection{
	entry ->   
	MC: String userSelection = inputOutput(message); -> inputOutput;
	CF: String userSelection = inputOutput(message); -> int recipe = 0;;
	CF: int recipe = 0; -> recipe = Integer.parseInt(userSelection) - 1;;
	MC: recipe = Integer.parseInt(userSelection) - 1; -> parseInt;
	CF: recipe = Integer.parseInt(userSelection) - 1; -> if (recipe >= 0 && recipe <=2) {;
	CF: if (recipe >= 0 && recipe <=2) { -> recipe = -1;;
	CF: recipe = -1; -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> System.out.println("Please select a number from 1-3.");;
	MC: System.out.println("Please select a number from 1-3."); -> println;
	CF: System.out.println("Please select a number from 1-3."); -> recipe = -1;;
	CF: recipe = -1; -> return recipe;;
	CF: return recipe; -> exit;
}
main{
	entry ->   
	MC: coffeeMaker = new CoffeeMaker(); -> <init>;
	CF: coffeeMaker = new CoffeeMaker(); -> System.out.println("Welcome to the CoffeeMaker!\n");;
	MC: System.out.println("Welcome to the CoffeeMaker!\n"); -> println;
	CF: System.out.println("Welcome to the CoffeeMaker!\n"); -> mainMenu();;
	MC: mainMenu(); -> mainMenu;
	CF: mainMenu(); -> };
	CF: } -> exit;
}
