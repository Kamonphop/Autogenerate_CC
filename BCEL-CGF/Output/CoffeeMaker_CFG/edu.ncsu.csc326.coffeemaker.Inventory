edu.ncsu.csc326.coffeemaker.Inventory.<init>{
	entry ->   
	LS: public Inventory() [SubClass: aload_0]
	MC: public Inventory() calls java.lang.Object.<init>
	CF: public Inventory() -> setCoffee(15)
	LS: setCoffee(15) [SubClass: aload_0]
	MC: setCoffee(15) calls edu.ncsu.csc326.coffeemaker.Inventory.setCoffee
	CF: setCoffee(15) -> setMilk(15)
	LS: setMilk(15) [SubClass: aload_0]
	MC: setMilk(15) calls edu.ncsu.csc326.coffeemaker.Inventory.setMilk
	CF: setMilk(15) -> setSugar(15)
	LS: setSugar(15) [SubClass: aload_0]
	MC: setSugar(15) calls edu.ncsu.csc326.coffeemaker.Inventory.setSugar
	CF: setSugar(15) -> setChocolate(15)
	LS: setChocolate(15) [SubClass: aload_0]
	MC: setChocolate(15) calls edu.ncsu.csc326.coffeemaker.Inventory.setChocolate
	CF: setChocolate(15) -> 
	CF:  -> exit [Return Type: void]
}
edu.ncsu.csc326.coffeemaker.Inventory.getChocolate{
	entry ->   
	CF: return chocolate -> exit [Return Type: int]
}
edu.ncsu.csc326.coffeemaker.Inventory.setChocolate{
	entry ->   
	LS: if(chocolate >= 0) [SubClass: iload_1]
	CF: if(chocolate >= 0) ->  [label = "iflt"]
	CF: if(chocolate >= 0) -> Inventory.chocolate = chocolate [label = "!iflt"]
	LS: Inventory.chocolate = chocolate [SubClass: iload_1]
	CF: Inventory.chocolate = chocolate -> 
	CF:  -> exit [Return Type: void]
}
edu.ncsu.csc326.coffeemaker.Inventory.addChocolate{
	entry ->   
	LS: try [SubClass: istore_2]
	CF: try -> catch (NumberFormatException e)
	LS: catch (NumberFormatException e) [SubClass: aload_1]
	MC: catch (NumberFormatException e) calls java.lang.Integer.parseInt
	LS: catch (NumberFormatException e) [SubClass: istore_2]
	CF: catch (NumberFormatException e) -> throw new InventoryException("Units of chocolate must be a positive integer")
	CF: throw new InventoryException("Units of chocolate must be a positive integer") -> Inventory.chocolate += amtChocolate [label = "goto"]
	LS: throw new InventoryException("Units of chocolate must be a positive integer") [SubClass: astore_3]
	CF: throw new InventoryException("Units of chocolate must be a positive integer") -> 
	MC:  calls edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>
	CF:  -> Inventory.chocolate += amtChocolate
	LS: Inventory.chocolate += amtChocolate [SubClass: iload_2]
	CF: Inventory.chocolate += amtChocolate ->  [label = "iflt"]
	CF: Inventory.chocolate += amtChocolate -> else [label = "!iflt"]
	LS: else [SubClass: iload_2]
	AI: else [SubClass: iadd	Type: int]
	CF: else -> throw new InventoryException("Units of chocolate must be a positive integer")
	CF: throw new InventoryException("Units of chocolate must be a positive integer") ->  [label = "goto"]
	MC:  calls edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>
	CF:  -> 
	CF:  -> exit [Return Type: void]
}
edu.ncsu.csc326.coffeemaker.Inventory.getCoffee{
	entry ->   
	CF:  -> exit [Return Type: int]
}
edu.ncsu.csc326.coffeemaker.Inventory.setCoffee{
	entry ->   
	LS: Inventory.coffee = coffee [SubClass: iload_1]
	CF: Inventory.coffee = coffee ->  [label = "iflt"]
	CF: Inventory.coffee = coffee ->  [label = "!iflt"]
	LS:  [SubClass: iload_1]
	CF:  -> 
	CF:  -> exit [Return Type: void]
}
edu.ncsu.csc326.coffeemaker.Inventory.addCoffee{
	entry ->   
	LS: try [SubClass: istore_2]
	CF: try -> catch (NumberFormatException e)
	LS: catch (NumberFormatException e) [SubClass: aload_1]
	MC: catch (NumberFormatException e) calls java.lang.Integer.parseInt
	LS: catch (NumberFormatException e) [SubClass: istore_2]
	CF: catch (NumberFormatException e) -> throw new InventoryException("Units of coffee must be a positive integer")
	CF: throw new InventoryException("Units of coffee must be a positive integer") -> Inventory.coffee += amtCoffee [label = "goto"]
	LS: throw new InventoryException("Units of coffee must be a positive integer") [SubClass: astore_3]
	CF: throw new InventoryException("Units of coffee must be a positive integer") -> 
	MC:  calls edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>
	CF:  -> Inventory.coffee += amtCoffee
	LS: Inventory.coffee += amtCoffee [SubClass: iload_2]
	CF: Inventory.coffee += amtCoffee ->  [label = "iflt"]
	CF: Inventory.coffee += amtCoffee -> else [label = "!iflt"]
	LS: else [SubClass: iload_2]
	AI: else [SubClass: iadd	Type: int]
	CF: else -> throw new InventoryException("Units of coffee must be a positive integer")
	CF: throw new InventoryException("Units of coffee must be a positive integer") ->  [label = "goto"]
	MC:  calls edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>
	CF:  -> 
	CF:  -> exit [Return Type: void]
}
edu.ncsu.csc326.coffeemaker.Inventory.getMilk{
	entry ->   
	CF:  -> exit [Return Type: int]
}
edu.ncsu.csc326.coffeemaker.Inventory.setMilk{
	entry ->   
	LS: Inventory.milk = milk [SubClass: iload_1]
	CF: Inventory.milk = milk ->  [label = "iflt"]
	CF: Inventory.milk = milk ->  [label = "!iflt"]
	LS:  [SubClass: iload_1]
	CF:  -> 
	CF:  -> exit [Return Type: void]
}
edu.ncsu.csc326.coffeemaker.Inventory.addMilk{
	entry ->   
	LS: try [SubClass: istore_2]
	CF: try -> catch (NumberFormatException e)
	LS: catch (NumberFormatException e) [SubClass: aload_1]
	MC: catch (NumberFormatException e) calls java.lang.Integer.parseInt
	LS: catch (NumberFormatException e) [SubClass: istore_2]
	CF: catch (NumberFormatException e) -> throw new InventoryException("Units of milk must be a positive integer")
	CF: throw new InventoryException("Units of milk must be a positive integer") -> Inventory.milk += amtMilk [label = "goto"]
	LS: throw new InventoryException("Units of milk must be a positive integer") [SubClass: astore_3]
	CF: throw new InventoryException("Units of milk must be a positive integer") -> 
	MC:  calls edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>
	CF:  -> Inventory.milk += amtMilk
	LS: Inventory.milk += amtMilk [SubClass: iload_2]
	CF: Inventory.milk += amtMilk ->  [label = "iflt"]
	CF: Inventory.milk += amtMilk -> else [label = "!iflt"]
	LS: else [SubClass: iload_2]
	AI: else [SubClass: iadd	Type: int]
	CF: else -> throw new InventoryException("Units of milk must be a positive integer")
	CF: throw new InventoryException("Units of milk must be a positive integer") ->  [label = "goto"]
	MC:  calls edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>
	CF:  -> 
	CF:  -> exit [Return Type: void]
}
edu.ncsu.csc326.coffeemaker.Inventory.getSugar{
	entry ->   
	CF:  -> exit [Return Type: int]
}
edu.ncsu.csc326.coffeemaker.Inventory.setSugar{
	entry ->   
	LS: Inventory.sugar = sugar [SubClass: iload_1]
	CF: Inventory.sugar = sugar ->  [label = "iflt"]
	CF: Inventory.sugar = sugar ->  [label = "!iflt"]
	LS:  [SubClass: iload_1]
	CF:  -> 
	CF:  -> exit [Return Type: void]
}
edu.ncsu.csc326.coffeemaker.Inventory.addSugar{
	entry ->   
	LS: try [SubClass: istore_2]
	CF: try -> catch (NumberFormatException e)
	LS: catch (NumberFormatException e) [SubClass: aload_1]
	MC: catch (NumberFormatException e) calls java.lang.Integer.parseInt
	LS: catch (NumberFormatException e) [SubClass: istore_2]
	CF: catch (NumberFormatException e) -> throw new InventoryException("Units of sugar must be a positive integer")
	CF: throw new InventoryException("Units of sugar must be a positive integer") -> Inventory.sugar += amtSugar [label = "goto"]
	LS: throw new InventoryException("Units of sugar must be a positive integer") [SubClass: astore_3]
	CF: throw new InventoryException("Units of sugar must be a positive integer") -> 
	MC:  calls edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>
	CF:  -> Inventory.sugar += amtSugar
	LS: Inventory.sugar += amtSugar [SubClass: iload_2]
	CF: Inventory.sugar += amtSugar ->  [label = "iflt"]
	CF: Inventory.sugar += amtSugar -> else [label = "!iflt"]
	LS: else [SubClass: iload_2]
	AI: else [SubClass: iadd	Type: int]
	CF: else -> throw new InventoryException("Units of sugar must be a positive integer")
	CF: throw new InventoryException("Units of sugar must be a positive integer") ->  [label = "goto"]
	MC:  calls edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>
	CF:  -> 
	CF:  -> exit [Return Type: void]
}
edu.ncsu.csc326.coffeemaker.Inventory.enoughIngredients{
	entry ->   
	LS: if(Inventory.coffee < r.getAmtCoffee()) [SubClass: istore_2]
	CF: if(Inventory.coffee < r.getAmtCoffee()) -> isEnough = false
	LS: isEnough = false [SubClass: aload_1]
	MC: isEnough = false calls edu.ncsu.csc326.coffeemaker.Recipe.getAmtCoffee
	CF: isEnough = false -> isEnough = false [label = "if_icmpge"]
	CF: isEnough = false ->  [label = "!if_icmpge"]
	LS:  [SubClass: istore_2]
	CF:  -> isEnough = false
	LS: isEnough = false [SubClass: aload_1]
	MC: isEnough = false calls edu.ncsu.csc326.coffeemaker.Recipe.getAmtMilk
	CF: isEnough = false -> isEnough = false [label = "if_icmpge"]
	CF: isEnough = false ->  [label = "!if_icmpge"]
	LS:  [SubClass: istore_2]
	CF:  -> isEnough = false
	LS: isEnough = false [SubClass: aload_1]
	MC: isEnough = false calls edu.ncsu.csc326.coffeemaker.Recipe.getAmtSugar
	CF: isEnough = false -> isEnough = false [label = "if_icmpge"]
	CF: isEnough = false ->  [label = "!if_icmpge"]
	LS:  [SubClass: istore_2]
	CF:  -> isEnough = false
	LS: isEnough = false [SubClass: aload_1]
	MC: isEnough = false calls edu.ncsu.csc326.coffeemaker.Recipe.getAmtChocolate
	CF: isEnough = false ->  [label = "if_icmpge"]
	CF: isEnough = false ->  [label = "!if_icmpge"]
	LS:  [SubClass: istore_2]
	CF:  -> 
	LS:  [SubClass: iload_2]
	CF:  -> exit [Return Type: int]
}
edu.ncsu.csc326.coffeemaker.Inventory.useIngredients{
	entry ->   
	LS: Inventory.coffee -= r.getAmtCoffee() [SubClass: aload_0]
	LS: Inventory.coffee -= r.getAmtCoffee() [SubClass: aload_1]
	MC: Inventory.coffee -= r.getAmtCoffee() calls edu.ncsu.csc326.coffeemaker.Inventory.enoughIngredients
	CF: Inventory.coffee -= r.getAmtCoffee() ->  [label = "ifeq"]
	CF: Inventory.coffee -= r.getAmtCoffee() -> Inventory.milk -= r.getAmtMilk() [label = "!ifeq"]
	LS: Inventory.milk -= r.getAmtMilk() [SubClass: aload_1]
	MC: Inventory.milk -= r.getAmtMilk() calls edu.ncsu.csc326.coffeemaker.Recipe.getAmtCoffee
	AI: Inventory.milk -= r.getAmtMilk() [SubClass: isub	Type: int]
	CF: Inventory.milk -= r.getAmtMilk() -> Inventory.sugar -= r.getAmtSugar()
	LS: Inventory.sugar -= r.getAmtSugar() [SubClass: aload_1]
	MC: Inventory.sugar -= r.getAmtSugar() calls edu.ncsu.csc326.coffeemaker.Recipe.getAmtMilk
	AI: Inventory.sugar -= r.getAmtSugar() [SubClass: isub	Type: int]
	CF: Inventory.sugar -= r.getAmtSugar() -> Inventory.chocolate -= r.getAmtChocolate()
	LS: Inventory.chocolate -= r.getAmtChocolate() [SubClass: aload_1]
	MC: Inventory.chocolate -= r.getAmtChocolate() calls edu.ncsu.csc326.coffeemaker.Recipe.getAmtSugar
	AI: Inventory.chocolate -= r.getAmtChocolate() [SubClass: isub	Type: int]
	CF: Inventory.chocolate -= r.getAmtChocolate() -> return true
	LS: return true [SubClass: aload_1]
	MC: return true calls edu.ncsu.csc326.coffeemaker.Recipe.getAmtChocolate
	AI: return true [SubClass: isub	Type: int]
	CF: return true -> else
	CF: else -> exit [Return Type: int]
	CF:  -> exit [Return Type: int]
}
edu.ncsu.csc326.coffeemaker.Inventory.toString{
	entry ->   
	MC: buf.append("Coffee: ") calls java.lang.StringBuffer.<init>
	LS: buf.append("Coffee: ") [SubClass: astore_1]
	CF: buf.append("Coffee: ") -> buf.append(getCoffee())
	LS: buf.append(getCoffee()) [SubClass: aload_1]
	MC: buf.append(getCoffee()) calls java.lang.StringBuffer.append
	CF: buf.append(getCoffee()) -> buf.append("\n")
	LS: buf.append("\n") [SubClass: aload_1]
	LS: buf.append("\n") [SubClass: aload_0]
	MC: buf.append("\n") calls edu.ncsu.csc326.coffeemaker.Inventory.getCoffee
	MC: buf.append("\n") calls java.lang.StringBuffer.append
	CF: buf.append("\n") -> buf.append("Milk: ")
	LS: buf.append("Milk: ") [SubClass: aload_1]
	MC: buf.append("Milk: ") calls java.lang.StringBuffer.append
	CF: buf.append("Milk: ") -> buf.append(getMilk())
	LS: buf.append(getMilk()) [SubClass: aload_1]
	MC: buf.append(getMilk()) calls java.lang.StringBuffer.append
	CF: buf.append(getMilk()) -> buf.append("\n")
	LS: buf.append("\n") [SubClass: aload_1]
	LS: buf.append("\n") [SubClass: aload_0]
	MC: buf.append("\n") calls edu.ncsu.csc326.coffeemaker.Inventory.getMilk
	MC: buf.append("\n") calls java.lang.StringBuffer.append
	CF: buf.append("\n") -> buf.append("Sugar: ")
	LS: buf.append("Sugar: ") [SubClass: aload_1]
	MC: buf.append("Sugar: ") calls java.lang.StringBuffer.append
	CF: buf.append("Sugar: ") -> buf.append(getSugar())
	LS: buf.append(getSugar()) [SubClass: aload_1]
	MC: buf.append(getSugar()) calls java.lang.StringBuffer.append
	CF: buf.append(getSugar()) -> buf.append("\n")
	LS: buf.append("\n") [SubClass: aload_1]
	LS: buf.append("\n") [SubClass: aload_0]
	MC: buf.append("\n") calls edu.ncsu.csc326.coffeemaker.Inventory.getSugar
	MC: buf.append("\n") calls java.lang.StringBuffer.append
	CF: buf.append("\n") -> buf.append("Chocolate: ")
	LS: buf.append("Chocolate: ") [SubClass: aload_1]
	MC: buf.append("Chocolate: ") calls java.lang.StringBuffer.append
	CF: buf.append("Chocolate: ") -> buf.append(getChocolate())
	LS: buf.append(getChocolate()) [SubClass: aload_1]
	MC: buf.append(getChocolate()) calls java.lang.StringBuffer.append
	CF: buf.append(getChocolate()) -> buf.append("\n")
	LS: buf.append("\n") [SubClass: aload_1]
	LS: buf.append("\n") [SubClass: aload_0]
	MC: buf.append("\n") calls edu.ncsu.csc326.coffeemaker.Inventory.getChocolate
	MC: buf.append("\n") calls java.lang.StringBuffer.append
	CF: buf.append("\n") -> return buf.toString()
	LS: return buf.toString() [SubClass: aload_1]
	MC: return buf.toString() calls java.lang.StringBuffer.append
	CF: return buf.toString() -> 
	LS:  [SubClass: aload_1]
	MC:  calls java.lang.StringBuffer.toString
	CF:  -> exit [Return Type: java.lang.Object]
}
