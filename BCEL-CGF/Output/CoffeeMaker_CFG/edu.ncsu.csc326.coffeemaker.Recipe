edu.ncsu.csc326.coffeemaker.Recipe.<init>{
	entry ->   
	MC: public Recipe() { -> java.lang.Object.<init>;
	CF: public Recipe() { -> this.name = "";;
	CF: this.name = ""; -> this.price = 0;;
	CF: this.price = 0; -> this.amtCoffee = 0;;
	CF: this.amtCoffee = 0; -> this.amtMilk = 0;;
	CF: this.amtMilk = 0; -> this.amtSugar = 0;;
	CF: this.amtSugar = 0; -> this.amtChocolate = 0;;
	CF: this.amtChocolate = 0; -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.getAmtChocolate{
	entry ->   
	CF: return amtChocolate; -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.setAmtChocolate{
	entry ->   
	CF: int amtChocolate = 0; -> amtChocolate = Integer.parseInt(chocolate);;
	MC: amtChocolate = Integer.parseInt(chocolate); -> java.lang.Integer.parseInt;
	CF: amtChocolate = Integer.parseInt(chocolate); -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> if (amtChocolate >= 0) { [label = "goto"];
	CF: } catch (NumberFormatException e) { -> throw new RecipeException("Units of chocolate must be a positive integer");;
	MC: throw new RecipeException("Units of chocolate must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.RecipeException.<init>;
	CF: throw new RecipeException("Units of chocolate must be a positive integer"); -> if (amtChocolate >= 0) {;
	CF: if (amtChocolate >= 0) { -> throw new RecipeException("Units of chocolate must be a positive integer"); [label = "iflt"];
	CF: if (amtChocolate >= 0) { -> this.amtChocolate = amtChocolate; [label = "!iflt"];
	CF: this.amtChocolate = amtChocolate; -> } else {;
	CF: } else { -> } [label = "goto"];
	MC: throw new RecipeException("Units of chocolate must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.RecipeException.<init>;
	CF: throw new RecipeException("Units of chocolate must be a positive integer"); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.getAmtCoffee{
	entry ->   
	CF: return amtCoffee; -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.setAmtCoffee{
	entry ->   
	CF: int amtCoffee = 0; -> amtCoffee = Integer.parseInt(coffee);;
	MC: amtCoffee = Integer.parseInt(coffee); -> java.lang.Integer.parseInt;
	CF: amtCoffee = Integer.parseInt(coffee); -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> if (amtCoffee >= 0) { [label = "goto"];
	CF: } catch (NumberFormatException e) { -> throw new RecipeException("Units of coffee must be a positive integer");;
	MC: throw new RecipeException("Units of coffee must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.RecipeException.<init>;
	CF: throw new RecipeException("Units of coffee must be a positive integer"); -> if (amtCoffee >= 0) {;
	CF: if (amtCoffee >= 0) { -> throw new RecipeException("Units of coffee must be a positive integer"); [label = "iflt"];
	CF: if (amtCoffee >= 0) { -> this.amtCoffee = amtCoffee; [label = "!iflt"];
	CF: this.amtCoffee = amtCoffee; -> } else {;
	CF: } else { -> } [label = "goto"];
	MC: throw new RecipeException("Units of coffee must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.RecipeException.<init>;
	CF: throw new RecipeException("Units of coffee must be a positive integer"); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.getAmtMilk{
	entry ->   
	CF: return amtMilk; -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.setAmtMilk{
	entry ->   
	CF: int amtMilk = 0; -> amtMilk = Integer.parseInt(milk);;
	MC: amtMilk = Integer.parseInt(milk); -> java.lang.Integer.parseInt;
	CF: amtMilk = Integer.parseInt(milk); -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> if (amtMilk >= 0) { [label = "goto"];
	CF: } catch (NumberFormatException e) { -> throw new RecipeException("Units of milk must be a positive integer");;
	MC: throw new RecipeException("Units of milk must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.RecipeException.<init>;
	CF: throw new RecipeException("Units of milk must be a positive integer"); -> if (amtMilk >= 0) {;
	CF: if (amtMilk >= 0) { -> throw new RecipeException("Units of milk must be a positive integer"); [label = "iflt"];
	CF: if (amtMilk >= 0) { -> this.amtMilk = amtMilk; [label = "!iflt"];
	CF: this.amtMilk = amtMilk; -> } else {;
	CF: } else { -> } [label = "goto"];
	MC: throw new RecipeException("Units of milk must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.RecipeException.<init>;
	CF: throw new RecipeException("Units of milk must be a positive integer"); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.getAmtSugar{
	entry ->   
	CF: return amtSugar; -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.setAmtSugar{
	entry ->   
	CF: int amtSugar = 0; -> amtSugar = Integer.parseInt(sugar);;
	MC: amtSugar = Integer.parseInt(sugar); -> java.lang.Integer.parseInt;
	CF: amtSugar = Integer.parseInt(sugar); -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> if (amtSugar >= 0) { [label = "goto"];
	CF: } catch (NumberFormatException e) { -> throw new RecipeException("Units of sugar must be a positive integer");;
	MC: throw new RecipeException("Units of sugar must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.RecipeException.<init>;
	CF: throw new RecipeException("Units of sugar must be a positive integer"); -> if (amtSugar >= 0) {;
	CF: if (amtSugar >= 0) { -> throw new RecipeException("Units of sugar must be a positive integer"); [label = "iflt"];
	CF: if (amtSugar >= 0) { -> this.amtSugar = amtSugar; [label = "!iflt"];
	CF: this.amtSugar = amtSugar; -> } else {;
	CF: } else { -> } [label = "goto"];
	MC: throw new RecipeException("Units of sugar must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.RecipeException.<init>;
	CF: throw new RecipeException("Units of sugar must be a positive integer"); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.getName{
	entry ->   
	CF: return name; -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.setName{
	entry ->   
	CF: if(name != null) { -> } [label = "ifnull"];
	CF: if(name != null) { -> this.name = name; [label = "!ifnull"];
	CF: this.name = name; -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.getPrice{
	entry ->   
	CF: return price; -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.setPrice{
	entry ->   
	CF: int amtPrice = 0; -> amtPrice = Integer.parseInt(price);;
	MC: amtPrice = Integer.parseInt(price); -> java.lang.Integer.parseInt;
	CF: amtPrice = Integer.parseInt(price); -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> if (amtPrice >= 0) { [label = "goto"];
	CF: } catch (NumberFormatException e) { -> throw new RecipeException("Price must be a positive integer");;
	MC: throw new RecipeException("Price must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.RecipeException.<init>;
	CF: throw new RecipeException("Price must be a positive integer"); -> if (amtPrice >= 0) {;
	CF: if (amtPrice >= 0) { -> throw new RecipeException("Price must be a positive integer"); [label = "iflt"];
	CF: if (amtPrice >= 0) { -> this.price = amtPrice; [label = "!iflt"];
	CF: this.price = amtPrice; -> } else {;
	CF: } else { -> } [label = "goto"];
	MC: throw new RecipeException("Price must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.RecipeException.<init>;
	CF: throw new RecipeException("Price must be a positive integer"); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.toString{
	entry ->   
	CF: return name; -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.hashCode{
	entry ->   
	CF: final int prime = 31; -> int result = 1;;
	CF: int result = 1; -> result = prime * result + ((name == null) ? 0 : name.hashCode());;
	CF: result = prime * result + ((name == null) ? 0 : name.hashCode()); -> result = prime * result + ((name == null) ? 0 : name.hashCode()); [label = "ifnonnull"];
	CF: result = prime * result + ((name == null) ? 0 : name.hashCode()); -> result = prime * result + ((name == null) ? 0 : name.hashCode()); [label = "!ifnonnull"];
	CF: result = prime * result + ((name == null) ? 0 : name.hashCode()); -> result = prime * result + ((name == null) ? 0 : name.hashCode()); [label = "goto"];
	MC: result = prime * result + ((name == null) ? 0 : name.hashCode()); -> java.lang.String.hashCode;
	CF: result = prime * result + ((name == null) ? 0 : name.hashCode()); -> return result;;
	CF: return result; -> exit;
}
edu.ncsu.csc326.coffeemaker.Recipe.equals{
	entry ->   
	CF: if (this == obj) -> if (obj == null) [label = "if_acmpne"];
	CF: if (this == obj) -> return true; [label = "!if_acmpne"];
	CF: return true; -> exit;
	CF: if (obj == null) -> if (getClass() != obj.getClass()) [label = "ifnonnull"];
	CF: if (obj == null) -> return false; [label = "!ifnonnull"];
	CF: return false; -> exit;
	MC: if (getClass() != obj.getClass()) -> java.lang.Object.getClass;
	MC: if (getClass() != obj.getClass()) -> java.lang.Object.getClass;
	CF: if (getClass() != obj.getClass()) -> final Recipe other = (Recipe) obj; [label = "if_acmpeq"];
	CF: if (getClass() != obj.getClass()) -> return false; [label = "!if_acmpeq"];
	CF: return false; -> exit;
	CF: final Recipe other = (Recipe) obj; -> if (name == null) {;
	CF: if (name == null) { -> } else if (!name.equals(other.name)) [label = "ifnonnull"];
	CF: if (name == null) { -> if (other.name != null) [label = "!ifnonnull"];
	CF: if (other.name != null) -> return true; [label = "ifnull"];
	CF: if (other.name != null) -> return false; [label = "!ifnull"];
	CF: return false; -> exit;
	MC: } else if (!name.equals(other.name)) -> java.lang.String.equals;
	CF: } else if (!name.equals(other.name)) -> return true; [label = "ifne"];
	CF: } else if (!name.equals(other.name)) -> return false; [label = "!ifne"];
	CF: return false; -> exit;
	CF: return true; -> exit;
}
