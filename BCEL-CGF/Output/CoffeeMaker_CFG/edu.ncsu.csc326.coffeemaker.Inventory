edu.ncsu.csc326.coffeemaker.Inventory.<init>{
	entry ->   
	MC: public Inventory() { -> java.lang.Object.<init>;
	CF: public Inventory() { -> setCoffee(15);;
	MC: setCoffee(15); -> edu.ncsu.csc326.coffeemaker.Inventory.setCoffee;
	CF: setCoffee(15); -> setMilk(15);;
	MC: setMilk(15); -> edu.ncsu.csc326.coffeemaker.Inventory.setMilk;
	CF: setMilk(15); -> setSugar(15);;
	MC: setSugar(15); -> edu.ncsu.csc326.coffeemaker.Inventory.setSugar;
	CF: setSugar(15); -> setChocolate(15);;
	MC: setChocolate(15); -> edu.ncsu.csc326.coffeemaker.Inventory.setChocolate;
	CF: setChocolate(15); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.getChocolate{
	entry ->   
	CF: return chocolate; -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.setChocolate{
	entry ->   
	CF: if(chocolate >= 0) { -> } [label = "iflt"];
	CF: if(chocolate >= 0) { -> Inventory.chocolate = chocolate; [label = "!iflt"];
	CF: Inventory.chocolate = chocolate; -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.addChocolate{
	entry ->   
	CF: int amtChocolate = 0; -> amtChocolate = Integer.parseInt(chocolate);;
	MC: amtChocolate = Integer.parseInt(chocolate); -> java.lang.Integer.parseInt;
	CF: amtChocolate = Integer.parseInt(chocolate); -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> if (amtChocolate >= 0) { [label = "goto"];
	CF: } catch (NumberFormatException e) { -> throw new InventoryException("Units of chocolate must be a positive integer");;
	MC: throw new InventoryException("Units of chocolate must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>;
	CF: throw new InventoryException("Units of chocolate must be a positive integer"); -> if (amtChocolate >= 0) {;
	CF: if (amtChocolate >= 0) { -> throw new InventoryException("Units of chocolate must be a positive integer"); [label = "iflt"];
	CF: if (amtChocolate >= 0) { -> Inventory.chocolate += amtChocolate; [label = "!iflt"];
	CF: Inventory.chocolate += amtChocolate; -> } else {;
	CF: } else { -> } [label = "goto"];
	MC: throw new InventoryException("Units of chocolate must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>;
	CF: throw new InventoryException("Units of chocolate must be a positive integer"); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.getCoffee{
	entry ->   
	CF: return coffee; -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.setCoffee{
	entry ->   
	CF: if(coffee >= 0) { -> } [label = "iflt"];
	CF: if(coffee >= 0) { -> Inventory.coffee = coffee; [label = "!iflt"];
	CF: Inventory.coffee = coffee; -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.addCoffee{
	entry ->   
	CF: int amtCoffee = 0; -> amtCoffee = Integer.parseInt(coffee);;
	MC: amtCoffee = Integer.parseInt(coffee); -> java.lang.Integer.parseInt;
	CF: amtCoffee = Integer.parseInt(coffee); -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> if (amtCoffee >= 0) { [label = "goto"];
	CF: } catch (NumberFormatException e) { -> throw new InventoryException("Units of coffee must be a positive integer");;
	MC: throw new InventoryException("Units of coffee must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>;
	CF: throw new InventoryException("Units of coffee must be a positive integer"); -> if (amtCoffee >= 0) {;
	CF: if (amtCoffee >= 0) { -> throw new InventoryException("Units of coffee must be a positive integer"); [label = "iflt"];
	CF: if (amtCoffee >= 0) { -> Inventory.coffee += amtCoffee; [label = "!iflt"];
	CF: Inventory.coffee += amtCoffee; -> } else {;
	CF: } else { -> } [label = "goto"];
	MC: throw new InventoryException("Units of coffee must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>;
	CF: throw new InventoryException("Units of coffee must be a positive integer"); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.getMilk{
	entry ->   
	CF: return milk; -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.setMilk{
	entry ->   
	CF: if(milk >= 0) { -> } [label = "iflt"];
	CF: if(milk >= 0) { -> Inventory.milk = milk; [label = "!iflt"];
	CF: Inventory.milk = milk; -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.addMilk{
	entry ->   
	CF: int amtMilk = 0; -> amtMilk = Integer.parseInt(milk);;
	MC: amtMilk = Integer.parseInt(milk); -> java.lang.Integer.parseInt;
	CF: amtMilk = Integer.parseInt(milk); -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> if (amtMilk >= 0) { [label = "goto"];
	CF: } catch (NumberFormatException e) { -> throw new InventoryException("Units of milk must be a positive integer");;
	MC: throw new InventoryException("Units of milk must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>;
	CF: throw new InventoryException("Units of milk must be a positive integer"); -> if (amtMilk >= 0) {;
	CF: if (amtMilk >= 0) { -> throw new InventoryException("Units of milk must be a positive integer"); [label = "iflt"];
	CF: if (amtMilk >= 0) { -> Inventory.milk += amtMilk; [label = "!iflt"];
	CF: Inventory.milk += amtMilk; -> } else {;
	CF: } else { -> } [label = "goto"];
	MC: throw new InventoryException("Units of milk must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>;
	CF: throw new InventoryException("Units of milk must be a positive integer"); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.getSugar{
	entry ->   
	CF: return sugar; -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.setSugar{
	entry ->   
	CF: if(sugar >= 0) { -> } [label = "iflt"];
	CF: if(sugar >= 0) { -> Inventory.sugar = sugar; [label = "!iflt"];
	CF: Inventory.sugar = sugar; -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.addSugar{
	entry ->   
	CF: int amtSugar = 0; -> amtSugar = Integer.parseInt(sugar);;
	MC: amtSugar = Integer.parseInt(sugar); -> java.lang.Integer.parseInt;
	CF: amtSugar = Integer.parseInt(sugar); -> } catch (NumberFormatException e) {;
	CF: } catch (NumberFormatException e) { -> if (amtSugar >= 0) { [label = "goto"];
	CF: } catch (NumberFormatException e) { -> throw new InventoryException("Units of sugar must be a positive integer");;
	MC: throw new InventoryException("Units of sugar must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>;
	CF: throw new InventoryException("Units of sugar must be a positive integer"); -> if (amtSugar >= 0) {;
	CF: if (amtSugar >= 0) { -> throw new InventoryException("Units of sugar must be a positive integer"); [label = "iflt"];
	CF: if (amtSugar >= 0) { -> Inventory.sugar += amtSugar; [label = "!iflt"];
	CF: Inventory.sugar += amtSugar; -> } else {;
	CF: } else { -> } [label = "goto"];
	MC: throw new InventoryException("Units of sugar must be a positive integer"); -> edu.ncsu.csc326.coffeemaker.exceptions.InventoryException.<init>;
	CF: throw new InventoryException("Units of sugar must be a positive integer"); -> };
	CF: } -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.enoughIngredients{
	entry ->   
	CF: boolean isEnough = true; -> if(Inventory.coffee < r.getAmtCoffee()) {;
	MC: if(Inventory.coffee < r.getAmtCoffee()) { -> edu.ncsu.csc326.coffeemaker.Recipe.getAmtCoffee;
	CF: if(Inventory.coffee < r.getAmtCoffee()) { -> if(Inventory.milk < r.getAmtMilk()) { [label = "if_icmpge"];
	CF: if(Inventory.coffee < r.getAmtCoffee()) { -> isEnough = false; [label = "!if_icmpge"];
	CF: isEnough = false; -> if(Inventory.milk < r.getAmtMilk()) {;
	MC: if(Inventory.milk < r.getAmtMilk()) { -> edu.ncsu.csc326.coffeemaker.Recipe.getAmtMilk;
	CF: if(Inventory.milk < r.getAmtMilk()) { -> if(Inventory.sugar < r.getAmtSugar()) { [label = "if_icmpge"];
	CF: if(Inventory.milk < r.getAmtMilk()) { -> isEnough = false; [label = "!if_icmpge"];
	CF: isEnough = false; -> if(Inventory.sugar < r.getAmtSugar()) {;
	MC: if(Inventory.sugar < r.getAmtSugar()) { -> edu.ncsu.csc326.coffeemaker.Recipe.getAmtSugar;
	CF: if(Inventory.sugar < r.getAmtSugar()) { -> if(Inventory.chocolate < r.getAmtChocolate()) { [label = "if_icmpge"];
	CF: if(Inventory.sugar < r.getAmtSugar()) { -> isEnough = false; [label = "!if_icmpge"];
	CF: isEnough = false; -> if(Inventory.chocolate < r.getAmtChocolate()) {;
	MC: if(Inventory.chocolate < r.getAmtChocolate()) { -> edu.ncsu.csc326.coffeemaker.Recipe.getAmtChocolate;
	CF: if(Inventory.chocolate < r.getAmtChocolate()) { -> return isEnough; [label = "if_icmpge"];
	CF: if(Inventory.chocolate < r.getAmtChocolate()) { -> isEnough = false; [label = "!if_icmpge"];
	CF: isEnough = false; -> return isEnough;;
	CF: return isEnough; -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.useIngredients{
	entry ->   
	MC: if (enoughIngredients(r)) { -> edu.ncsu.csc326.coffeemaker.Inventory.enoughIngredients;
	CF: if (enoughIngredients(r)) { -> return false; [label = "ifeq"];
	CF: if (enoughIngredients(r)) { -> Inventory.coffee -= r.getAmtCoffee(); [label = "!ifeq"];
	MC: Inventory.coffee -= r.getAmtCoffee(); -> edu.ncsu.csc326.coffeemaker.Recipe.getAmtCoffee;
	CF: Inventory.coffee -= r.getAmtCoffee(); -> Inventory.milk -= r.getAmtMilk();;
	MC: Inventory.milk -= r.getAmtMilk(); -> edu.ncsu.csc326.coffeemaker.Recipe.getAmtMilk;
	CF: Inventory.milk -= r.getAmtMilk(); -> Inventory.sugar -= r.getAmtSugar();;
	MC: Inventory.sugar -= r.getAmtSugar(); -> edu.ncsu.csc326.coffeemaker.Recipe.getAmtSugar;
	CF: Inventory.sugar -= r.getAmtSugar(); -> Inventory.chocolate -= r.getAmtChocolate();;
	MC: Inventory.chocolate -= r.getAmtChocolate(); -> edu.ncsu.csc326.coffeemaker.Recipe.getAmtChocolate;
	CF: Inventory.chocolate -= r.getAmtChocolate(); -> return true;;
	CF: return true; -> exit;
	CF: return false; -> exit;
}
edu.ncsu.csc326.coffeemaker.Inventory.toString{
	entry ->   
	MC: StringBuffer buf = new StringBuffer(); -> java.lang.StringBuffer.<init>;
	CF: StringBuffer buf = new StringBuffer(); -> buf.append("Coffee: ");;
	MC: buf.append("Coffee: "); -> java.lang.StringBuffer.append;
	CF: buf.append("Coffee: "); -> buf.append(getCoffee());;
	MC: buf.append(getCoffee()); -> edu.ncsu.csc326.coffeemaker.Inventory.getCoffee;
	MC: buf.append(getCoffee()); -> java.lang.StringBuffer.append;
	CF: buf.append(getCoffee()); -> buf.append("\n");;
	MC: buf.append("\n"); -> java.lang.StringBuffer.append;
	CF: buf.append("\n"); -> buf.append("Milk: ");;
	MC: buf.append("Milk: "); -> java.lang.StringBuffer.append;
	CF: buf.append("Milk: "); -> buf.append(getMilk());;
	MC: buf.append(getMilk()); -> edu.ncsu.csc326.coffeemaker.Inventory.getMilk;
	MC: buf.append(getMilk()); -> java.lang.StringBuffer.append;
	CF: buf.append(getMilk()); -> buf.append("\n");;
	MC: buf.append("\n"); -> java.lang.StringBuffer.append;
	CF: buf.append("\n"); -> buf.append("Sugar: ");;
	MC: buf.append("Sugar: "); -> java.lang.StringBuffer.append;
	CF: buf.append("Sugar: "); -> buf.append(getSugar());;
	MC: buf.append(getSugar()); -> edu.ncsu.csc326.coffeemaker.Inventory.getSugar;
	MC: buf.append(getSugar()); -> java.lang.StringBuffer.append;
	CF: buf.append(getSugar()); -> buf.append("\n");;
	MC: buf.append("\n"); -> java.lang.StringBuffer.append;
	CF: buf.append("\n"); -> buf.append("Chocolate: ");;
	MC: buf.append("Chocolate: "); -> java.lang.StringBuffer.append;
	CF: buf.append("Chocolate: "); -> buf.append(getChocolate());;
	MC: buf.append(getChocolate()); -> edu.ncsu.csc326.coffeemaker.Inventory.getChocolate;
	MC: buf.append(getChocolate()); -> java.lang.StringBuffer.append;
	CF: buf.append(getChocolate()); -> buf.append("\n");;
	MC: buf.append("\n"); -> java.lang.StringBuffer.append;
	CF: buf.append("\n"); -> return buf.toString();;
	MC: return buf.toString(); -> java.lang.StringBuffer.toString;
	CF: return buf.toString(); -> exit;
}
